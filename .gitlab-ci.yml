stages:
    - prepare
    - build

variables:
  GIT_STRATEGY: none


Prepare source:
  stage: prepare
  image: python:${PYTHON_VERSION}
  script:
    - (cd jaqalpaq 2>/dev/null && git fetch && git switch --detach "$CI_COMMIT_BRANCH") || git clone "$CI_REPOSITORY_URL" -b "$CI_COMMIT_BRANCH"
    - PROJECT_URL="$(printf '%s' "${CI_REPOSITORY_URL}"|sed 's#/jaqalpaq.git$##')"
    - cd jaqalpaq
    - PYGSTI_VERSION="$(<setup.cfg grep -oP '(?<=^pygsti-integration = pyGSTi==).*(?=$)')"
    - if ! git diff --check $(git merge-base origin/master HEAD) HEAD ; then echo "See above whitespace errors." ; exit 1; fi
    - if find . -iname '*.py' -exec grep -l -P '\t' {} + ; then echo 'Above files have tabs.' ; exit 1 ; fi
    - devel/refresh-data-files setup.cfg.new
    - if ! diff -q setup.cfg.new setup.cfg ; then
        echo "Run devel/refresh-data-files to refresh examples list." ;
        exit 1 ;
      fi
    - pip install black~=23.1 build
    - black --check .
    - cd ..
    - (cd jaqalpaq-extras 2>/dev/null && git fetch && git switch --detach "$JAQALPAQ_EXTRAS_BRANCH") || git clone --depth 1 "${PROJECT_URL}/jaqalpaq-extras.git" -b "$JAQALPAQ_EXTRAS_BRANCH"
    - (cd qscout-gatemodels 2>/dev/null && git fetch && git switch --detach "$QSCOUT_BRANCH") || git clone --depth 1 "${PROJECT_URL}/qscout-gatemodels.git" -b "$QSCOUT_BRANCH"
    - (cd jaqalpaw 2>/dev/null && git fetch && git switch --detach "$JAQALPAW_BRANCH") || git clone --depth 1 "${PROJECT_URL}/jaqalpaw.git" -b "$JAQALPAW_BRANCH"
    - cp -rt . jaqalpaq/devel
    - mkdir build
    - for pkg in jaqalpaq jaqalpaq-extras qscout-gatemodels jaqalpaw ; do
        python3 -m build -o build $pkg || exit 1 ;
      done
    - echo $PYGSTI_VERSION | tee build/pygsti_version
  artifacts:
    paths:
      - build
      - devel
    expire_in: 1 hour


Build Image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  dependencies:
    - Prepare source
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - mkdir ~/.docker && printf '%s' "$DOCKER_AUTH_CONFIG" >~/.docker/config.json
    - if [ -z "$DOCKER_IMAGE" ] ; then DOCKER_IMAGE="$(printf '%s' "$CI_COMMIT_REF_NAME" | sed 's#/#-#g')" ; fi
    - BASE_IMAGE_FULL="${DOCKER_REPO}jaqal-base:${BASE_IMAGE}"
    - if [ -n "$BUILD_BASE" ] || ! docker pull "$BASE_IMAGE_FULL" ; then
        { docker build -f devel/Dockerfile.base --build-arg FROM_IMAGE=python:"$PYTHON_VERSION"
          --build-arg PIP_INDEX_URL="$PIP_INDEX_URL" --build-arg http_proxy="$http_proxy" --build-arg no-proxy="$no_proxy"
          --build-arg pygsti_version="$(cat build/pygsti_version)" --tag "$BASE_IMAGE_FULL" . &&
        docker push "$BASE_IMAGE_FULL" ; } || exit 1 ;
      fi
    - JAQAL_IMAGE_FULL="${DOCKER_REPO}jaqalpaq:${DOCKER_IMAGE}"
    - docker build -f devel/Dockerfile.jaqal --build-arg FROM_IMAGE="$BASE_IMAGE_FULL"
        --build-arg PIP_INDEX_URL="$PIP_INDEX_URL" --build-arg http_proxy="$http_proxy" --build-arg no-proxy="$no_proxy"
        --tag "$JAQAL_IMAGE_FULL" .
    - docker push "$JAQAL_IMAGE_FULL"
    - <devel/run_tests docker run --name "run_tests" -e PYTHON_VERSION -e no_proxy -e http_proxy -e PIP_INDEX_URL -i "$JAQAL_IMAGE_FULL" /bin/bash
    - mkdir htmlcov
    - docker cp run_tests:/htmlcov .
    - ret=0
    - if [ "$TEST_REPRODUCE" = "1" ] ; then
        { docker create -i --name "run_notebooks" -e PYTHON_VERSION -e no_proxy -e http_proxy -e PIP_INDEX_URL -i "$JAQAL_IMAGE_FULL" /bin/bash &&
          docker cp devel run_notebooks:devel || exit 1 ; } ;
        <devel/run_notebooks docker start -ai run_notebooks || ret=1 ;
        docker cp run_notebooks:/executed-notebooks.tar . || exit 1 ;
      fi
    - exit $ret
  artifacts:
    when: always
    paths:
      - htmlcov
      - executed-notebooks.tar
    expire_in: 1 week
